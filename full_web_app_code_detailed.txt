
# Importing necessary modules from Flask and SQLAlchemy
from flask import Flask, render_template, request, redirect, url_for, session, flash
from flask_sqlalchemy import SQLAlchemy
from werkzeug.security import generate_password_hash, check_password_hash

# Initializing the Flask application
app = Flask(__name__)
app.secret_key = 'your_secret_key'  # Secret key for session management
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///users.db'  # Configuring the SQLite database
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False  # Disabling modification track for performance

# Setting up the database model
db = SQLAlchemy(app)

# User model in SQLAlchemy for database operations
class User(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(80), unique=True, nullable=False)
    password = db.Column(db.String(200), nullable=False)

# Route for handling the login page and login action
@app.route('/', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':  # Check if the form has been submitted
        username = request.form['username']
        password = request.form['password']
        user = User.query.filter_by(username=username).first()  # Query the database for the username
        if user and check_password_hash(user.password, password):  # Validate password
            session['user_id'] = user.id  # Store user id in session
            return redirect(url_for('dashboard'))  # Redirect to dashboard if login is successful
        else:
            flash('Invalid username or password')  # Show error message
    return render_template('login.html')  # Render login template if GET request or login failed

# Route for the dashboard page
@app.route('/dashboard')
def dashboard():
    if not session.get('user_id'):  # Check if user is not logged in
        return redirect(url_for('login'))  # Redirect to login page
    return render_template('dashboard.html')  # Render the dashboard template

# Route for logging out
@app.route('/logout')
def logout():
    session.pop('user_id', None)  # Remove user id from session
    return redirect(url_for('login'))  # Redirect to login page

# Main function to run the app
if __name__ == '__main__':
    db.create_all()  # Create the database tables
    app.run(debug=True)  # Run the app with debug enabled

# HTML template for the login page with Bootstrap for styling
<!DOCTYPE html>
<html>
<head>
    <title>Login</title>
</head>
<body>
    <h2>Login</h2>
    <form method="POST">
        <label for="username">Username:</label>
        <input type="text" name="username" required><br>
        <label for="password">Password:</label>
        <input type="password" name="password" required><br>
        <button type="submit">Login</button>
    </form>
    {% with messages = get_flashed_messages() %}
      {% if messages %}
        <ul class='flashes'>
        {% for message in messages %}
          <li>{{ message }}</li>
        {% endfor %}
        </ul>
      {% endif %}
    {% endwith %}
</body>
</html>

# HTML template for the dashboard page
<!DOCTYPE html>
<html>
<head>
    <title>Dashboard</title>
</head>
<body>
    <h2>Dashboard</h2>
    <p>Welcome to your dashboard!</p>
    <a href="/logout">Logout</a>
</body>
</html>
